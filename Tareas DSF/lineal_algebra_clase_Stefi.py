# -*- coding: utf-8 -*-
"""2. Lineal Algebra with python - Basics Operations.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/salvarezmeneses/DataScience2020/blob/master/2_Lineal_Algebra_with_python_Basics_Operations.ipynb

## Basics Operations
Transposiciòn , Suma de matrices y Escalares.
===============

**Objetivo:**
* El objetivo es realizar operaciones básicos.

* definiremos los elementos bàsicos y su valor.
"""

import numpy as np
escalar = 5.679
vector = np.array([3,4,5,6])
matriz = np.array([[1,2],[3,4],[5,6]])
tensor = np.array([[[255,255,255],[128,128,128],[80,80,80]],
    [[100,101,102],[103,104,105],[160,170,180]],
    [[190,200,210], [220,230,204], [255,227,238]]])

"""# Transposición de escalar, vector.

**¿ Que es transponer ?**

* Matemáticamente hablando transponer es cambiar las filas x columnas. (siempre y cuando tengan las mismas dimensiones)

* si tengo una matriz de 3 x 2 , quedara de 2 x 3.

* En python , escribir una transpuesta es usar la función .T

* Las variables que almacenen las transpuestas se denotaran con la _t
"""

# Ejercicio 1: realice la transpuesta del escalar e indica al menos una conclusión.

escalar_t = escalar.T
print(escalar_t)

"""**conclusion:** El resultado anterior no se ejecutara por que el escalar no tiene ni filas, ni columnas por tanto no se podrá transponer"""

# Ejercicio 2: realice la transpuesta del escalar e indica al menos una conclusión.

vector = np.array([3,4,5,6])
vector.T

"""**conclusion:**  El resultado anterior ejecutara el mismo Vector.

# Transposición de matrices
![texto alternativo](https://66.media.tumblr.com/4bba076e87a9c046323aeeaa42fcbca2/tumblr_inline_p4czceCYRv1r5w51c_1280.gifv)
"""

# Matriz inicial
matriz = np.array([[1,2],[3,4],[5,6]])
print(matriz)
print("La dimensión es: ", matriz.shape)

# Transposición de Matriz.
matriz_t = matriz.T
print(matriz_t)
print("La dimensión es: ", matriz_t.shape)

# LA TRANSPUESTA DE UNA MATRIZ TRANSPUESTA , ES LA MATRIZ ORIGINAL
matriz_t_t = matriz_t.T
print(matriz_t_t)

# Se obtiene la misma matriz original.

"""# Transposición de tensores."""

tensor = np.array([[[255,255,255],[128,128,128],[80,80,80]],
    [[100,101,102],[103,104,105],[160,170,180]],
    [[190,200,210], [220,230,204], [255,227,238]]])
print(tensor)
tensor.shape

tensor_t = tensor.T
print(tensor_t)
tensor_t.shape

"""# Suma de matrices.

* La suma de matrices, matematicamente se define cuando se tienen las mismas dimensiones.
* Cuando suma y resta matrices , sus dimensiones deben ser iguales.

![texto alternativo](https://www.ditutor.com/matrices/images/19_1.gif)
"""

# Suma de 2 matrices con igual dimensión.
import numpy as np
A = np.array([[2,0,1],[3,0,0],[5,1,1]])
B = np.array([[1,0,1],[1,2,1],[1,1,0]])
C = A + B
D = A - B 

print('la dimension de A es: ', A.shape)
print('la dimension de B es: ', B.shape)
print("\n")
print('la resta de ambos es:',"\n",D)
print('la suma de ambos es:',"\n",C)

# suma de matriz + Escalar.
import numpy as np

escalar = 5.679
matriz = np.array([[1,2],[3,4],[5,6]])

D = matriz + escalar

print(D)

# EJERCICIO 1:  Cree una matriz de 5 x 5 y sumesela a su transpuesta.
# Su codigo aquí.
import numpy as np

# Cree una matriz de 5 x 5
matriz3 = np.array([[1,2,3,4,5],[3,4,7,8,9],[5,6,1,0,2],[7,8,4,3,2],[5,2,3,4,1]])
print(matriz3)
matriz3.shape

matriz3_t = matriz3.T
print('la matriz transpuesta es: ')
print(matriz3.T)

# suma la matriz por su transpuesta.

E = matriz3 + matriz3_t
print(E)

"""# Broadcasting: Suma de matrices de diferente dimensiòn.

* El término difusión (broadcasting) describe cómo numpy trata las matrices con diferentes dimensiones. 

* Las partes de la operación broadcasting son: 
- La matriz pequeña
- La matriz grande.

* ¿Como opera?: La matriz más pequeña se repite ( o “transmite”,) a través de la matriz más grande para que tengan las mismas dimensiones.

* La matriz más pequeña se repite.

### Practica Broadcasting
"""

import numpy as np

# Analisis 1 : matriz + vector de diferentes dimensiones
escalar = 5.679
vector = np.array([3,4,5,])             # vector es fila de     3 elementos.
matriz = np.array([[1,2],[3,4],[5,6]])  # matriz tiene filas de 2 elementos.
 
A = vector + matriz

"""* **Conclusion matriz + vector :** '''No es posible, tienen diferentes dimensiones (shapes)
solucion: transponer la matrix para cambiar sus dimensiones'''
"""

# Validar dimensiones de matriz.t y Vector
print('la matriz es original es:') 
print(matriz)
print('la matriz Transpuesta es:')
print(matriz.T)
print('el vector es :')
print(vector)

# Creaciòn de Broadcasting.
A = matriz.T + vector 
print(A)

"""* **Conclusiòn Broadcasting** 
* Broadcasting es extender (duplicar) el elemento de menor dimensiòn hasta el de mayor dimensiòn.
* tanto, matriz.T como vector tienen filas de 2 elementos.![texto alternativo]
* la matriz mas pequeña (vector) se repitió.
"""

# Broadcasting con la misma dimensiòn.
C = matriz + 42
print(C)

# creacion de vector 5 X 5
vector4 = ([10,20,30,40,50])
matriz4 = np.array([[1,2,3,4,5],[3,4,7,8,9],[5,6,1,0,2],[7,8,4,3,2],[5,2,3,4,1]])

D = vector4 + matriz4
print(D)

"""# Parte 3: Producto Interno o Producto Punto (dot producto) entre dos matrices.

**Producto punto**: 
* Producto Punto es una multiplicación a todos los elementos de la matriz.

$$ H =
\left(\begin{array}{cc} 
1 & 2\\
3 & 4\\
\end{array}\right) I =
\left(\begin{array}{cc} 
11 & 12 \\
13 & 14\\
\end{array}\right)
$$
"""

import numpy as np

M1 = np.array([[1,2],[3,4]]) 
M2 = np.array([[11,12],[13,14]]) 

M1_dot = M1.dot(M2)

print('el producto interno es:',"\n", M1_dot ,"\n")

"""# Determinante de una matriz.

Es una multiplcacion
"""